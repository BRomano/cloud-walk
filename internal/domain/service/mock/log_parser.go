// Code generated by MockGen. DO NOT EDIT.
// Source: log_parser.go
//
// Generated by this command:
//
//	mockgen -source log_parser.go -destination mock/log_parser.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	domain "cloud-walk/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogParserService is a mock of LogParserService interface.
type MockLogParserService struct {
	ctrl     *gomock.Controller
	recorder *MockLogParserServiceMockRecorder
}

// MockLogParserServiceMockRecorder is the mock recorder for MockLogParserService.
type MockLogParserServiceMockRecorder struct {
	mock *MockLogParserService
}

// NewMockLogParserService creates a new mock instance.
func NewMockLogParserService(ctrl *gomock.Controller) *MockLogParserService {
	mock := &MockLogParserService{ctrl: ctrl}
	mock.recorder = &MockLogParserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogParserService) EXPECT() *MockLogParserServiceMockRecorder {
	return m.recorder
}

// GetGamesStatistics mocks base method.
func (m *MockLogParserService) GetGamesStatistics(game int) (map[string]domain.MatchStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGamesStatistics", game)
	ret0, _ := ret[0].(map[string]domain.MatchStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGamesStatistics indicates an expected call of GetGamesStatistics.
func (mr *MockLogParserServiceMockRecorder) GetGamesStatistics(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGamesStatistics", reflect.TypeOf((*MockLogParserService)(nil).GetGamesStatistics), game)
}

// GetKillsByMeans mocks base method.
func (m *MockLogParserService) GetKillsByMeans(game int) (map[string]domain.MatchDeathStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKillsByMeans", game)
	ret0, _ := ret[0].(map[string]domain.MatchDeathStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKillsByMeans indicates an expected call of GetKillsByMeans.
func (mr *MockLogParserServiceMockRecorder) GetKillsByMeans(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKillsByMeans", reflect.TypeOf((*MockLogParserService)(nil).GetKillsByMeans), game)
}
