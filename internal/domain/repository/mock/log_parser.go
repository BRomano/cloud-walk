// Code generated by MockGen. DO NOT EDIT.
// Source: log_parser.go
//
// Generated by this command:
//
//	mockgen -source log_parser.go -destination mock/log_parser.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	domain "cloud-walk/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogParser is a mock of LogParser interface.
type MockLogParser struct {
	ctrl     *gomock.Controller
	recorder *MockLogParserMockRecorder
}

// MockLogParserMockRecorder is the mock recorder for MockLogParser.
type MockLogParserMockRecorder struct {
	mock *MockLogParser
}

// NewMockLogParser creates a new mock instance.
func NewMockLogParser(ctrl *gomock.Controller) *MockLogParser {
	mock := &MockLogParser{ctrl: ctrl}
	mock.recorder = &MockLogParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogParser) EXPECT() *MockLogParserMockRecorder {
	return m.recorder
}

// CollectStatisticsFromLog mocks base method.
func (m *MockLogParser) CollectStatisticsFromLog(logger []byte) (map[string]domain.MatchData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectStatisticsFromLog", logger)
	ret0, _ := ret[0].(map[string]domain.MatchData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectStatisticsFromLog indicates an expected call of CollectStatisticsFromLog.
func (mr *MockLogParserMockRecorder) CollectStatisticsFromLog(logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectStatisticsFromLog", reflect.TypeOf((*MockLogParser)(nil).CollectStatisticsFromLog), logger)
}
